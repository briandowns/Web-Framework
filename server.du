import Socket;
import Datetime;
import Path;

import "routing.du" as RoutingModule;
import "response.du" as ResponseModule;
import "utils/utils.du" as UtilModule;

class WebServer {
    init(host, port) {
        this.host = host;
        this.port = port;
    }

    start() {
        this.socket = Socket.create(Socket.AF_INET, Socket.SOCK_STREAM);
        this.socket.setsockopt(Socket.SOL_SOCKET, Socket.SO_REUSEADDR);
        print("Starting server on {}:{}".format(this.host, this.port));
        if (!this.socket.bind(this.host, this.port)) {
            print(Socket.strerror());
            return;
        }
        this.listen();
    }

    listen() {
        this.socket.listen();
        while {
            // print("Begin loop");
            var client = this.socket.accept();
            // print("Accept client!");
            this.handleClient(client);
        }
    }

    handleClient(client) {
        var data = client.recv(1024);
        var rawData = data.split(" ");

        if (rawData.len() < 2) {
            print(rawData);
            return;
        }

        var verb = rawData[0];
        var route = rawData[1];

        var routeResponse = this.handleRoute(verb, route);

        print("[{}] {} - {} - {}".format(
            Datetime.strftime("%a, %d %b %Y %H:%M:%S"),
            verb,
            routeResponse.status,
            route
        ));

        client.write(this.generateResponse(routeResponse));
        client.close();
    }

    generateResponse(response) {
        return "HTTP/1.1 {}\r\n".format(response.status) +
            "Date: {}\r\n".format(Datetime.strftime("%a, %d %b %Y %H:%M:%S")) +
            "Server: Dictu-Server\r\n" +
            "Content-Length: {}\r\n".format(response.contentLength) +
            "Connection: close\r\n" +
            "Content-Type: {}\r\n".format(response.mimeType) +
            "\r\n" +
            response.content;
    }

    handleRoute(verb, route) {
        if (RoutingModule.routes.exists(route)) {
            if (RoutingModule.routes[route].exists(verb)) {
                return RoutingModule.routes[route][verb]();
            }
        }

        // Check public directory
        if (route.contains('/public/')) {
            var filename = route.split('/')[-1];
            if (Path.exists('public/{}'.format(filename))) {
                return UtilModule.public(filename);
            }
        }

        return ResponseModule.Response('', 'text/html', 404);
    }

    close() {
        this.socket.close();
    }
}

var ws = WebServer("127.0.0.1", 8080);
ws.start();