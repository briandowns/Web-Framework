import Socket;

class Server {
    var HTTP_DELIMITER = "\r\n\r\n";

    // TODO: Investigate why callback can't be private
    init(var callback, private host="127.0.0.1", private port=8080) {
        this.socket = nil;
    }

    start() {
        const socket = Socket.create(Socket.AF_INET, Socket.SOCK_STREAM);

        if (!socket.success()) {
            print(this.socket.unwrapError());
            System.exit(1);
        }

        this.socket = socket.unwrap();
        this.socket.setsockopt(Socket.SOL_SOCKET, Socket.SO_REUSEADDR);
        
        print("Starting server on {}:{}".format(this.host, this.port));
        
        if (!this.socket.bind(this.host, this.port).success()) {
            print("Failed to bind socket");
            System.exit(1);
        }

        this.listen();
    }

    listen() {
        const result = this.socket.listen();
        if (!result.success()) {
            print(result.unwrapError());
            System.exit(1);
        }
        
        while {
            const connection = this.socket.accept();

            if (!connection.success()) {
                print(connection.unwrapError());
                System.exit(1);
            }

            const [client, address] = connection.unwrap();
            this.handleClient(client, address);
        }
    }

    handleClient(client, address) {
        const data = this.getData(client);
        if (data != '') {
            this.callback(client, address, data);
        }
        client.close();
    }

    getData(client, size=2048) {
        var buffer = client.recv(size);

        if (!buffer.success()) {
            print(buffer.unwrapError());
            System.exit(1);
        }

        buffer = buffer.unwrap();

        if (buffer.len() != size) {
            return buffer;
        }

        while {
            const data = client.recv(size);

            if (!data.success()) {
                print(data.unwrapError());
                System.exit(1);
            }

            buffer += data.unwrap();

            if (buffer.contains(this.HTTP_DELIMITER)) {
                break;
            }
        }

        return buffer;
    }
}